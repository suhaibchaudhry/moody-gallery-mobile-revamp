<?php
function da_js_updater_init() {
  if(da_js_updater_switch_js($_GET['q'])) {
    //Change jquery version
    if(function_exists('jquery_update_change_path')) {
      jquery_update_change_path(drupal_get_path('module', 'da_js_updater') .'/js');
      if(function_exists('jquery_update_libs_change_path')) {
        jquery_update_libs_change_path(drupal_get_path('module', 'da_js_updater') .'/js');
      }
      drupal_add_js(drupal_get_path('module', 'da_js_updater').'/js/views_fix.js', 'theme');
    } else {
      drupal_set_message('A hacked version of JQuery Update for DAUI is required for proper functionality.', 'error');  
    }
  }
}

function da_js_updater_switch_js($query) {
  if(strpos($query, 'node/add') !== FALSE) {
    return FALSE;
  }
  
  if(strpos($query, 'admin/store') !== FALSE) {
    //UBERCART JS
    return TRUE;
  }
  
  if(strpos($query, 'admin/desc-edit') !== FALSE) {
    return TRUE;
  }
  
  if(strpos($query, 'batch') !== FALSE) {
    return FALSE;
  }
  
  if(strpos($query, 'admin') !== FALSE) {
    return FALSE;
  }
  
  if(strpos($query, 'cart/checkout') !== FALSE) {
    return FALSE;
  }

  if(strpos($query, 'imce') !== FALSE) {
    return FALSE;
  }
  
  if(strpos($query, 'node') !== FALSE && strpos($query, 'edit') !== FALSE || strpos($query, 'node') !== FALSE && strpos($query, 'webform') !== FALSE) {
    return FALSE;
  }

  return TRUE;
}

//Fix Views Callback to spit proper JSON for new JQuery
function da_js_updater_menu_alter(&$items) {
  if(isset($items['views/ajax'])) {
    unset($items['views/ajax']['file']);
    $items['views/ajax']['page callback'] = 'da_js_updater_views_ajax';
  }
}

function da_js_updater_views_ajax() {
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  if (isset($_REQUEST['view_name']) && isset($_REQUEST['view_display_id'])) {
    $name = $_REQUEST['view_name'];
    $display_id = $_REQUEST['view_display_id'];
    $args = isset($_REQUEST['view_args']) && $_REQUEST['view_args'] !== '' ? explode('/', $_REQUEST['view_args']) : array();
    $path = isset($_REQUEST['view_path']) ? $_REQUEST['view_path'] : NULL;
    $dom_id = isset($_REQUEST['view_dom_id']) ? intval($_REQUEST['view_dom_id']) : NULL;
    $pager_element = isset($_REQUEST['pager_element']) ? intval($_REQUEST['pager_element']) : NULL;
    views_include('ajax');
    $object = new stdClass();

    $object->status = FALSE;
    $object->display = '';

    $arg = explode('/', $_REQUEST['view_path']);

    if ($arg[0] == 'admin' || (variable_get('node_admin_theme', '0') && $arg[0] == 'node' && ($arg[1] == 'add' || $arg[2] == 'edit'))) {
        global $custom_theme;
        $custom_theme = variable_get('admin_theme', '0');
        drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');
    }
    // Load the view.
    if ($view = views_get_view($name)) {
      if ($view->access($display_id)) {

        // Fix 'q' for paging.
        if (!empty($path)) {
          $_GET['q'] = $path;
        }

        // Override the display's pager_element with the one actually used.
        if (isset($pager_element)) {
          $view->display[$display_id]->handler->set_option('pager_element', $pager_element);
        }
        // Reuse the same DOM id so it matches that in Drupal.settings.
        $view->dom_id = $dom_id;

        $errors = $view->validate();
        if ($errors === TRUE) {
          $object->status = TRUE;
          $object->display .= $view->preview($display_id, $args);
          // Get the title after the preview call, to let it set
          // up both the view's current display and arguments
          $object->title = $view->get_title();
        }
        else {
          foreach ($errors as $error) {
            drupal_set_message($error, 'error');
          }
        }
        // Register the standard JavaScript callback.
        $object->__callbacks = array('Drupal.Views.Ajax.ajaxViewResponse');
        // Allow other modules to extend the data returned.
        drupal_alter('ajax_data', $object, 'views', $view);
      }
    }
    $messages = theme('status_messages');
    $object->messages = $messages ? '<div class="views-messages">' . $messages . '</div>' : '';

    da_js_updater_views_ajax_render($object);
  }
}

/**
 * Simple render function to make sure output is what we want.
 *
 * This function renders an object into JSON, and that object contains
 * commands to the ajax response parser on the other side. The actual
 * commands that can be sent are completely dependent upon the client
 * javascript parser, which can be anything, but this function assumes
 * that 'display', at least, will be displayed in some kind of ajax
 * spot or popup.
 */
function da_js_updater_views_ajax_render($output = NULL, $title = NULL, $url = NULL, $js = NULL) {
  if (empty($output)) {
    $output->display = t('Server reports invalid input error.');
    $output->title = t('Error');
  }
  elseif (!is_object($output)) {
    $temp = new stdClass();
    $temp->display = $output;
    $temp->title = $title;
    $temp->url = $url;
    $output = $temp;
  }
  if (!empty($js)) {
    $output->js = $js;
  }

  print json_encode($output);
  exit;
}
